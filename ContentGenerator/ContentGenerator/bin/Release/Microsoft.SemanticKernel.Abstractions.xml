<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole">
            <summary>
            A description of the intended purpose of a message within a chat completions interaction.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.System">
            <summary>
            The role that instructs or sets the behavior of the assistant.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.Assistant">
            <summary>
            The role that provides responses to system-instructed, user-prompted input.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.User">
            <summary>
            The role that provides input for chat completions.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.Tool">
            <summary>
            The role that provides additional information and references for chat completions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.Label">
            <summary>
            Gets the label associated with this AuthorRole.
            </summary>
            <remarks>
            The label is what will be serialized into the "role" message field of the Chat Message format.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.#ctor(System.String)">
            <summary>
            Creates a new AuthorRole instance with the provided label.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.op_Equality(Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole)">
            <summary>
            Returns a value indicating whether two AuthorRole instances are equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first AuthorRole instance to compare </param>
            <param name="right"> the second AuthorRole instance to compare </param>
            <returns> true if left and right are both null or have equivalent labels; false otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.op_Inequality(Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole,Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole)">
            <summary>
            Returns a value indicating whether two AuthorRole instances are not equivalent, as determined by a
            case-insensitive comparison of their labels.
            </summary>
            <param name="left"> the first AuthorRole instance to compare </param>
            <param name="right"> the second AuthorRole instance to compare </param>
            <returns> false if left and right are both null or have equivalent labels; true otherwise </returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.Equals(Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatCompletionExtensions">
            <summary>
            Provides extension methods for the IChatCompletion interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatCompletionExtensions.GenerateMessageStreamAsync(Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion,Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Generates a new chat message as an asynchronous stream.
            </summary>
            <param name="chatCompletion">The target IChatCompletion interface to extend.</param>
            <param name="chat">The chat history.</param>
            <param name="requestSettings">The AI request settings (optional).</param>
            <param name="cancellationToken">The asynchronous cancellation token (optional).</param>
            <remarks>This extension does not support multiple prompt results (only the first will be returned).</remarks>
            <returns>An asynchronous stream of the generated chat message in string format.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatCompletionExtensions.GenerateMessageAsync(Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion,Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Generates a new chat message asynchronously.
            </summary>
            <param name="chatCompletion">The target IChatCompletion interface to extend.</param>
            <param name="chat">The chat history.</param>
            <param name="requestSettings">The AI request settings (optional).</param>
            <param name="cancellationToken">The asynchronous cancellation token (optional).</param>
            <remarks>This extension does not support multiple prompt results (only the first will be returned).</remarks>
            <returns>A task representing the generated chat message in string format.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory">
            <summary>
            Chat message history representation
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.Messages">
            <summary>
            List of messages in the chat
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.AddMessage(Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole,System.String)">
            <summary>
            Add a message to the chat history
            </summary>
            <param name="authorRole">Role of the message author</param>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.InsertMessage(System.Int32,Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole,System.String)">
            <summary>
            Insert a message into the chat history
            </summary>
            <param name="index">Index of the message to insert</param>
            <param name="authorRole">Role of the message author</param>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.AddUserMessage(System.String)">
            <summary>
            Add a user message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.AddAssistantMessage(System.String)">
            <summary>
            Add an assistant message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory.AddSystemMessage(System.String)">
            <summary>
            Add a system message to the chat history
            </summary>
            <param name="content">Message content</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatMessageBase">
            <summary>
            Chat message abstraction
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatMessageBase.Role">
            <summary>
            Role of the author of the message
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatMessageBase.Content">
            <summary>
            Content of the message
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatMessageBase.#ctor(Microsoft.SemanticKernel.AI.ChatCompletion.AuthorRole,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatMessageBase"/> class
            </summary>
            <param name="role">Role of the author of the message</param>
            <param name="content">Content of the message</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings">
            <summary>
            Settings for a chat completion request.
            For OpenAI see https://platform.openai.com/docs/api-reference/chat
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.Temperature">
            <summary>
            Temperature controls the randomness of the completion.
            The higher the temperature, the more random the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.TopP">
            <summary>
            TopP controls the diversity of the completion.
            The higher the TopP, the more diverse the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.PresencePenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on whether they appear in the text so far, increasing the
            model's likelihood to talk about new topics.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.FrequencyPenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on their existing frequency in the text so far, decreasing
            the model's likelihood to repeat the same line verbatim.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.StopSequences">
            <summary>
            Sequences where the completion will stop generating further tokens.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.ResultsPerPrompt">
            <summary>
            How many completions to generate for each prompt. Default is 1.
            Note: Because this parameter generates many completions, it can quickly consume your token quota.
            Use carefully and ensure that you have reasonable settings for max_tokens and stop.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.MaxTokens">
            <summary>
            The maximum number of tokens to generate in the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.TokenSelectionBiases">
            <summary>
            Modify the likelihood of specified tokens appearing in the completion.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings.FromCompletionConfig(Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig)">
            <summary>
            Create a new settings object with the values from another settings object.
            </summary>
            <param name="config"></param>
            <returns>An instance of <see cref="T:Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings"/> </returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion">
            <summary>
            Interface for chat completion services
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion.CreateNewChat(System.String)">
            <summary>
            Create a new empty chat instance
            </summary>
            <param name="instructions">Optional chat instructions for the AI service</param>
            <returns>Chat object</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion.GetChatCompletionsAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Get chat completion results for the prompt and settings.
            </summary>
            <param name="chat">The chat history context.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different chat results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion.GetStreamingChatCompletionsAsync(Microsoft.SemanticKernel.AI.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.AI.ChatCompletion.ChatRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Get chat streaming completion results for the prompt and settings.
            </summary>
            <param name="chat">The chat history context.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>AsyncEnumerable list of different streaming chat results generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.IChatResult">
            <summary>
            Interface for chat completion results
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.ChatCompletion.IChatResult.ModelResult">
            <summary>
            Gets the model result data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.IChatResult.GetChatMessageAsync(System.Threading.CancellationToken)">
            <summary>
            Get the chat message from the result.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Current chat message content</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ChatCompletion.IChatStreamingResult">
            <summary>
            Interface for chat completion streaming results
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ChatCompletion.IChatStreamingResult.GetStreamingChatMessageAsync(System.Threading.CancellationToken)">
            <summary>
            Get the chat message from the streaming result.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Current chat message streaming content</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.Embeddings.EmbeddingGenerationExtensions">
            <summary>
            Provides a collection of static methods for operating on <see cref="T:Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingGeneration`2"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.Embeddings.EmbeddingGenerationExtensions.GenerateEmbeddingAsync``2(Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingGeneration{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="value"/>.
            </summary>
            <typeparam name="TValue">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The numeric type of the embedding data.</typeparam>
            <param name="generator">The embedding generator.</param>
            <param name="value">A value from which an embedding will be generated.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A list of embedding structs representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingGeneration`2">
            <summary>
            Represents a generator of embeddings.
            </summary>
            <typeparam name="TValue">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The numeric type of the embedding data.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingGeneration`2.GenerateEmbeddingsAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Generates an embedding from the given <paramref name="data"/>.
            </summary>
            <param name="data">List of strings to generate embeddings for</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of embeddings</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.Embeddings.ITextEmbeddingGeneration">
            <summary>
            Represents a generator of text embeddings of type <c>float</c>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration">
            <summary>
            Interface for image generation services
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration.GenerateImageAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generate an image matching the given description
            </summary>
            <param name="description">Image description</param>
            <param name="width">Image width in pixels</param>
            <param name="height">Image height in pixels</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Generated image in base64 format or image URL</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings">
            <summary>
            Settings for a text completion request.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.Temperature">
            <summary>
            Temperature controls the randomness of the completion.
            The higher the temperature, the more random the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.TopP">
            <summary>
            TopP controls the diversity of the completion.
            The higher the TopP, the more diverse the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.PresencePenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on whether they appear in the text so far, increasing the
            model's likelihood to talk about new topics.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.FrequencyPenalty">
            <summary>
            Number between -2.0 and 2.0. Positive values penalize new tokens
            based on their existing frequency in the text so far, decreasing
            the model's likelihood to repeat the same line verbatim.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.MaxTokens">
            <summary>
            The maximum number of tokens to generate in the completion.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.StopSequences">
            <summary>
            Sequences where the completion will stop generating further tokens.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.ResultsPerPrompt">
            <summary>
            How many completions to generate for each prompt. Default is 1.
            Note: Because this parameter generates many completions, it can quickly consume your token quota.
            Use carefully and ensure that you have reasonable settings for max_tokens and stop.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.ChatSystemPrompt">
            <summary>
            The system prompt to use when generating text completions using a chat model.
            Defaults to "Assistant is a large language model."
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.TokenSelectionBiases">
            <summary>
            Modify the likelihood of specified tokens appearing in the completion.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings.FromCompletionConfig(Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig)">
            <summary>
            Create a new settings object with the values from another settings object.
            </summary>
            <param name="config">Template configuration</param>
            <returns>An instance of <see cref="T:Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings"/></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion">
            <summary>
            Interface for text completion services
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion.GetCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Get completion results for the prompt and settings.
            </summary>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different completions results generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion.GetStreamingCompletionsAsync(System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Get streaming completion results for the prompt and settings.
            </summary>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>List of different completion streaming results generated by the remote model</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextResult">
            <summary>
            Interface for text completion results.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.AI.TextCompletion.ITextResult.ModelResult">
            <summary>
            Gets the model result data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.ITextResult.GetCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the text completion result.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation, with the result being the completed text.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextStreamingResult">
            <summary>
            Interface for text completion streaming results.
            Provides an asynchronous enumerable of text completion results.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.ITextStreamingResult.GetCompletionStreamingAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an asynchronous enumerable of text completion results.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of <see cref="T:System.String"/> representing the text completion results.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AI.TextCompletion.TextCompletionExtensions">
            <summary>
            Class sponsor that holds extension methods for ITextCompletion interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.TextCompletionExtensions.CompleteAsync(Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion,System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates a completion for the prompt and settings.
            </summary>
            <param name="textCompletion">Target interface to extend</param>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <remarks>This extension does not support multiple prompt results (Only the first will be returned)</remarks>
            <returns>Text generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.TextCompletionExtensions.CompleteStreamAsync(Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion,System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates a completion for the prompt and settings.
            </summary>
            <param name="textCompletion">Target interface to extend</param>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <remarks>This extension does not support multiple prompt results (Only the first will be returned)</remarks>
            <returns>Streaming content of the text generated by the remote model</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.AI.TextCompletion.TextCompletionExtensions.CompleteStreamsAsync(Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion,System.String,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Creates a completion for the prompt and settings.
            </summary>
            <param name="textCompletion">Target interface to extend.</param>
            <param name="text">The prompt to complete.</param>
            <param name="requestSettings">Request settings for the completion API.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Streaming content of the text generated by the remote model.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletionServiceExtensions">
            <summary>
            Provides extension methods for working with chat completion services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletionServiceExtensions.GetChatCompletionService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Get the <see cref="T:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion"/> matching the given <paramref name="serviceId"/>, or
            the default if <paramref name="serviceId"/> is not provided or not found.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">Optional identifier of the desired service.</param>
            <returns>The completion service id matching the given id or the default.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">Thrown when no suitable service is found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletionServiceExtensions.HasChatCompletionService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Returns true if a <see cref="T:Microsoft.SemanticKernel.AI.ChatCompletion.IChatCompletion"/> exist with the specified ID.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">The service ID to search for. If null, it will look for a default service.</param>
            <returns>True if the service ID is registered, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextEmbeddingServiceExtensions">
            <summary>
            Provides extension methods for working with text embedding services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextEmbeddingServiceExtensions.GetTextEmbeddingService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Get the <see cref="T:Microsoft.SemanticKernel.AI.Embeddings.ITextEmbeddingGeneration"/> matching the given <paramref name="serviceId"/>, or the default
            if the <paramref name="serviceId"/> is not provided or not found.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">Optional identifier of the desired service.</param>
            <returns>The embedding service matching the given id or the default service.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">Thrown when no suitable service is found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextEmbeddingServiceExtensions.HasTextEmbeddingService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Returns true if a <see cref="T:Microsoft.SemanticKernel.AI.Embeddings.ITextEmbeddingGeneration"/> exist with the specified ID.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">The service ID to search for. If null, it will look for a default service.</param>
            <returns>True if the service ID is registered, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ImageGenerationServiceExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration"/> services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageGenerationServiceExtensions.GetImageGenerationService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Get the <see cref="T:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration"/> matching the given <paramref name="serviceId"/>, or the default
            if the <paramref name="serviceId"/> is not provided or not found.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">Optional identifier of the desired service.</param>
            <returns>The <see cref="T:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration"/> id matching the given id or the default.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">Thrown when no suitable service is found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.ImageGenerationServiceExtensions.HasImageGenerationService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Returns true if a <see cref="T:Microsoft.SemanticKernel.AI.ImageGeneration.IImageGeneration"/> exist with the specified ID.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">The service ID to search for. If null, it will look for a default service.</param>
            <returns>True if the service ID is registered, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextCompletionServiceExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion"/> services.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextCompletionServiceExtensions.GetTextCompletionServiceOrDefault(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Get the <see cref="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion"/> matching the given <paramref name="serviceId"/>, or the default
            if the <paramref name="serviceId"/> is not provided or not found.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">Optional identifier of the desired service.</param>
            <returns>The text completion service id matching the given ID or the default.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">Thrown when no suitable service is found.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextCompletionServiceExtensions.HasTextCompletionService(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String)">
            <summary>
            Returns true if a <see cref="T:Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion"/> exist with the specified ID.
            </summary>
            <param name="services">The service provider.</param>
            <param name="serviceId">The service ID to search for. If null, it will look for a default service.</param>
            <returns>True if the service ID is registered, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException">
            <summary>
            Represents an exception specific to HTTP operations.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/> class with its message set to <paramref name="message"/>.
            </summary>
            <param name="message">A string that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/> class with its message set to <paramref name="message"/>.
            </summary>
            <param name="message">A string that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.#ctor(System.Nullable{System.Net.HttpStatusCode},System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/> class with its message
            and additional properties for the HTTP status code and response content.
            </summary>
            <param name="statusCode">The HTTP status code.</param>
            <param name="responseContent">The content of the HTTP response.</param>
            <param name="message">A string that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.StatusCode">
            <summary>
            Gets or sets the HTTP status code. If the property is null, it indicates that no response was received.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Diagnostics.HttpOperationException.ResponseContent">
            <summary>
            Gets or sets the content of the HTTP response.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.SKException">
            <summary>
            Represents the base exception from which all Semantic Kernel exceptions derive.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.SKException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.SKException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.SKException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.SKException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.SKException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Diagnostics.SKException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.Telemetry">
            <summary>
            Provides functionality to manage telemetry settings.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.Telemetry.TelemetryDisabledEnvVar">
            <summary>
            Environment variable used in Azure to enable/disable telemetry.
            See: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.Telemetry.HttpUserAgent">
            <summary>
            HTTP User Agent.
            Note: Azure max length 24 chars.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Diagnostics.Telemetry.IsTelemetryEnabled">
            <summary>
            Gets a value indicating whether telemetry is enabled or not.
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Azure customers setting AZURE_TELEMETRY_DISABLED=1 expect telemetry to be disabled.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType">
            <summary>
            Contains the values of status codes defined for HTTP in the response to an HTTP request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Continue">
            <summary>
            The server has received the request headers and the client should proceed to send the request body.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.SwitchingProtocols">
            <summary>
            The server is switching protocols according to the Upgrade header sent by the client.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Processing">
            <summary>
            The server is processing the request, but has not completed it yet.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.EarlyHints">
            <summary>
            The server is sending some hints about the response before the final status code.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.OK">
            <summary>
            The request has succeeded and the response contains the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Created">
            <summary>
            The request has been fulfilled and a new resource has been created.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Accepted">
            <summary>
            The request has been accepted for further processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NonAuthoritativeInformation">
            <summary>
            The server is returning a response from a different source than the requested one, but the response is still valid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NoContent">
            <summary>
            The request has been successfully processed, but the server does not need to return any content.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ResetContent">
            <summary>
            The server has fulfilled the request and the client should reset the document view.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PartialContent">
            <summary>
            The server is returning a partial response to a range request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MultiStatus">
            <summary>
            The server is returning a response that contains multiple status codes for different parts of the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.AlreadyReported">
            <summary>
            The server has already reported the status of the request and does not need to repeat it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.IMUsed">
            <summary>
            The server is returning a response that is the result of applying a delta encoding to the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Ambiguous">
            <summary>
            The requested resource has multiple representations and the client should choose one of them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MultipleChoices">
            <summary>
            The requested resource has multiple representations and the client should choose one of them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Moved">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MovedPermanently">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Found">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Redirect">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the new URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RedirectMethod">
            <summary>
            The requested resource can be found at a different URI and the client should use a GET method to retrieve it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.SeeOther">
            <summary>
            The requested resource can be found at a different URI and the client should use a GET method to retrieve it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotModified">
            <summary>
            The requested resource has not been modified since the last request and the client can use the cached version.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UseProxy">
            <summary>
            The requested resource is only available through a proxy and the client should use the proxy URI.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Unused">
            <summary>
            This status code is no longer used and is reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RedirectKeepVerb">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.TemporaryRedirect">
            <summary>
            The requested resource has been temporarily moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PermanentRedirect">
            <summary>
            The requested resource has been permanently moved to a new location and the client should use the same method to access it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.BadRequest">
            <summary>
            The server cannot process the request due to a malformed syntax or an invalid parameter.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Unauthorized">
            <summary>
            The request requires authentication and the client should provide valid credentials.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PaymentRequired">
            <summary>
            The request requires payment and the client should provide valid payment information.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Forbidden">
            <summary>
            The server has understood the request, but refuses to authorize it due to insufficient permissions or other reasons.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotFound">
            <summary>
            The server cannot find the requested resource and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MethodNotAllowed">
            <summary>
            The server does not support the method used by the request and the client should use a different method.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotAcceptable">
            <summary>
            The server cannot produce a response that matches the preferences specified by the request headers.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ProxyAuthenticationRequired">
            <summary>
            The request requires authentication through a proxy and the client should provide valid proxy credentials.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestTimeout">
            <summary>
            The server did not receive the complete request within the time limit and the client should try again later.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Conflict">
            <summary>
            The request could not be completed due to a conflict with the current state of the resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Gone">
            <summary>
            The requested resource is no longer available and the server does not know the new location.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.LengthRequired">
            <summary>
            The request requires a Content-Length header and the client should provide it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PreconditionFailed">
            <summary>
            The request does not meet the preconditions specified by the request headers and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestEntityTooLarge">
            <summary>
            The request entity is too large and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestUriTooLong">
            <summary>
            The request URI is too long and the server cannot process it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnsupportedMediaType">
            <summary>
            The request entity has a media type that the server does not support or cannot handle.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestedRangeNotSatisfiable">
            <summary>
            The request specifies a range that the server cannot satisfy or is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ExpectationFailed">
            <summary>
            The request contains an Expect header that the server cannot meet or is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.MisdirectedRequest">
            <summary>
            The request was directed to a server that is not able to produce a response.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnprocessableEntity">
            <summary>
            The request entity is well-formed, but cannot be processed by the server due to semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.Locked">
            <summary>
            The requested resource is locked and the client should release it before modifying it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.FailedDependency">
            <summary>
            The request failed due to a dependency on another request that failed.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UpgradeRequired">
            <summary>
            The request requires the server to upgrade to a different protocol and the client should use the Upgrade header to specify it.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.PreconditionRequired">
            <summary>
            The request requires the server to apply preconditions and the client should use the If-Match or If-Unmodified-Since headers to specify them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.TooManyRequests">
            <summary>
            The client has sent too many requests in a given time and the server rejects them to prevent overload.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.RequestHeaderFieldsTooLarge">
            <summary>
            The request contains headers that are too large and the server cannot process them.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.UnavailableForLegalReasons">
            <summary>
            The server is denying access to the requested resource for legal reasons and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.InternalServerError">
            <summary>
            The server encountered an unexpected error and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotImplemented">
            <summary>
            The server does not support the functionality required by the request and the client should not repeat the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.BadGateway">
            <summary>
            The server received an invalid response from an upstream server and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.ServiceUnavailable">
            <summary>
            The server is temporarily unavailable due to maintenance or overload and the client should try again later.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.GatewayTimeout">
            <summary>
            The server did not receive a timely response from an upstream server and cannot fulfill the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.HttpVersionNotSupported">
            <summary>
            The server does not support the HTTP version used by the request and the client should use a different version.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.VariantAlsoNegotiates">
            <summary>
            The server has a configuration error and cannot negotiate a suitable representation for the requested resource.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.InsufficientStorage">
            <summary>
            The server has insufficient storage space to complete the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.LoopDetected">
            <summary>
            The server detected an infinite loop while processing the request.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NotExtended">
            <summary>
            The request requires additional extensions that the server does not support or cannot handle.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Diagnostics.HttpStatusCodeType.NetworkAuthenticationRequired">
            <summary>
            The request requires authentication at the network level and the client should provide valid network credentials.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.Verify.ParametersUniqueness(System.Collections.Generic.IList{Microsoft.SemanticKernel.SkillDefinition.ParameterView})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Events.FunctionInvokedEventArgs">
            <summary>
            Event arguments available to the Kernel.FunctionInvoked event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Events.FunctionInvokedEventArgs.IsRepeatRequested">
            <summary>
            Indicates if the function execution should repeat.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.FunctionInvokedEventArgs.#ctor(Microsoft.SemanticKernel.SkillDefinition.FunctionView,Microsoft.SemanticKernel.Orchestration.SKContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Events.FunctionInvokedEventArgs"/> class.
            </summary>
            <param name="functionView">Function view details</param>
            <param name="context">Context related to the event</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.FunctionInvokedEventArgs.Repeat">
            <summary>
            Repeat the current function invocation.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Events.FunctionInvokingEventArgs">
            <summary>
            Event arguments available to the Kernel.FunctionInvoking event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Events.FunctionInvokingEventArgs.IsSkipRequested">
            <summary>
            Indicates if the function execution should be skipped.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.FunctionInvokingEventArgs.#ctor(Microsoft.SemanticKernel.SkillDefinition.FunctionView,Microsoft.SemanticKernel.Orchestration.SKContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Events.FunctionInvokingEventArgs"/> class.
            </summary>
            <param name="functionView">Function view details</param>
            <param name="context">Context related to the event</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.FunctionInvokingEventArgs.Skip">
            <summary>
            Skip the current function invoking attempt.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Events.SKCancelEventArgs">
            <summary>
            Base arguments for cancellable events.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Events.SKCancelEventArgs.CancelToken">
            <summary>
            Cancellation token to be used to cancel further execution.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.SKCancelEventArgs.Cancel">
            <summary>
            Cancel all further execution.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.SKCancelEventArgs.Finalize">
            <summary>
            Dispose resources.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Events.SKEventArgs">
            <summary>
            Base arguments for events.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Events.SKEventArgs.#ctor(Microsoft.SemanticKernel.SkillDefinition.FunctionView,Microsoft.SemanticKernel.Orchestration.SKContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Events.SKEventArgs"/> class.
            </summary>
            <param name="functionView">Function view details</param>
            <param name="context">Context related to the event</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Events.SKEventArgs.FunctionView">
            <summary>
            Function view details.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Events.SKEventArgs.SKContext">
            <summary>
            Context related to the event.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpHandlerFactory`1">
            <summary>
            A factory for creating instances of <see cref="T:System.Net.Http.DelegatingHandler"/>.
            </summary>
            <typeparam name="THandler"></typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpHandlerFactory`1.Create(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new instance of <see cref="T:System.Net.Http.DelegatingHandler"/>.
            </summary>
            <param name="loggerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory">
            <summary>
            Factory for creating <see cref="T:System.Net.Http.DelegatingHandler"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory.Create(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new <see cref="T:System.Net.Http.DelegatingHandler"/> instance with the specified logger.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A new <see cref="T:System.Net.Http.DelegatingHandler"/> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.NullHttpHandler">
            <summary>
            A http retry handler that does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.NullHttpHandlerFactory">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory"/> that creates <see cref="T:Microsoft.SemanticKernel.Http.NullHttpHandler"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.NullHttpHandlerFactory.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Microsoft.SemanticKernel.Http.NullHttpHandlerFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.NullHttpHandlerFactory.Create(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new <see cref="T:Microsoft.SemanticKernel.Http.NullHttpHandler"/> instance.
            </summary>
            <param name="loggerFactory">The logger factory to use.</param>
            <returns>A new <see cref="T:Microsoft.SemanticKernel.Http.NullHttpHandler"/> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.IKernel">
            <summary>
            Interface for the semantic kernel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernel.LoggerFactory">
            <summary>
            App logger
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernel.Memory">
            <summary>
            Semantic memory instance
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernel.PromptTemplateEngine">
            <summary>
            Reference to the engine rendering prompt templates
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernel.Skills">
            <summary>
            Reference to the read-only skill collection containing all the imported functions
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.IKernel.HttpHandlerFactory">
            <summary>
            Reference to Http handler factory
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RegisterSemanticFunction(System.String,Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig)">
            <summary>
            Build and register a function in the internal skill collection, in a global generic skill.
            </summary>
            <param name="functionName">Name of the semantic function. The name can contain only alphanumeric chars + underscore.</param>
            <param name="functionConfig">Function configuration, e.g. I/O params, AI settings, localization details, etc.</param>
            <returns>A C# function wrapping AI logic, usually defined with natural language</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RegisterSemanticFunction(System.String,System.String,Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig)">
            <summary>
            Build and register a function in the internal skill collection.
            </summary>
            <param name="skillName">Name of the skill containing the function. The name can contain only alphanumeric chars + underscore.</param>
            <param name="functionName">Name of the semantic function. The name can contain only alphanumeric chars + underscore.</param>
            <param name="functionConfig">Function configuration, e.g. I/O params, AI settings, localization details, etc.</param>
            <returns>A C# function wrapping AI logic, usually defined with natural language</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RegisterCustomFunction(Microsoft.SemanticKernel.SkillDefinition.ISKFunction)">
            <summary>
            Registers a custom function in the internal skill collection.
            </summary>
            <param name="customFunction">The custom function to register.</param>
            <returns>A C# function wrapping the function execution logic.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.ImportSkill(System.Object,System.String)">
            <summary>
            Import a set of functions from the given skill. The functions must have the `SKFunction` attribute.
            Once these functions are imported, the prompt templates can use functions to import content at runtime.
            </summary>
            <param name="skillInstance">Instance of a class containing functions</param>
            <param name="skillName">Name of the skill for skill collection and prompt templates. If the value is empty functions are registered in the global namespace.</param>
            <returns>A list of all the semantic functions found in the directory, indexed by function name.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RegisterMemory(Microsoft.SemanticKernel.Memory.ISemanticTextMemory)">
            <summary>
            Set the semantic memory to use
            </summary>
            <param name="memory">Semantic memory instance</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(Microsoft.SemanticKernel.SkillDefinition.ISKFunction,Microsoft.SemanticKernel.Orchestration.ContextVariables,System.Threading.CancellationToken)">
            <summary>
            Run a single synchronous or asynchronous <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ISKFunction"/>.
            </summary>
            <param name="skFunction">A Semantic Kernel function to run</param>
            <param name="variables">Input to process</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(System.String,Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="input">Input to process</param>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(Microsoft.SemanticKernel.Orchestration.ContextVariables,Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="variables">Input to process</param>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(System.Threading.CancellationToken,Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(System.String,System.Threading.CancellationToken,Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="input">Input to process</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.RunAsync(Microsoft.SemanticKernel.Orchestration.ContextVariables,System.Threading.CancellationToken,Microsoft.SemanticKernel.SkillDefinition.ISKFunction[])">
            <summary>
            Run a pipeline composed of synchronous and asynchronous functions.
            </summary>
            <param name="variables">Input to process</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pipeline">List of functions</param>
            <returns>Result of the function composition</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.CreateNewContext">
            <summary>
            Create a new instance of a context, linked to the kernel internal state.
            </summary>
            <returns>SK context</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.GetService``1(System.String)">
            <summary>
            Get one of the configured services. Currently limited to AI services.
            </summary>
            <param name="name">Optional name. If the name is not provided, returns the default T available</param>
            <typeparam name="T">Service type</typeparam>
            <returns>Instance of T</returns>
        </member>
        <member name="E:Microsoft.SemanticKernel.IKernel.FunctionInvoking">
            <summary>
            Used for registering a function invoking event handler.
            Triggers before each function invocation.
            </summary>
        </member>
        <member name="E:Microsoft.SemanticKernel.IKernel.FunctionInvoked">
            <summary>
            Used for registering a function invoked event handler.
            Triggers after each function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernel.Func(System.String,System.String)">
            <summary>
            Access registered functions by skill + name. Not case sensitive.
            The function might be native or semantic, it's up to the caller handling it.
            </summary>
            <param name="skillName">Skill name</param>
            <param name="functionName">Function name</param>
            <returns>Delegate to execute the function</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.DataEntryBase">
            <summary>
            A base class for data entries.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.DataEntryBase.#ctor(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.SemanticKernel.Memory.DataEntryBase"/>.
            </summary>
            <param name="key">The data key.</param>
            <param name="timestamp">The data timestamp.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.Key">
            <summary>
            Gets the key of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.Timestamp">
            <summary>
            Gets the timestamp of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.DataEntryBase.HasTimestamp">
            <summary>
            <c>true</c> if the data has a timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.IMemoryStore">
            <summary>
            An interface for storing and retrieving indexed <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> objects in a data store.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.CreateCollectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new collection in the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetCollectionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all collection names in the data store.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of collection names.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.DoesCollectionExistAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines if a collection exists in the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>True if given collection exists, false if not.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.DeleteCollectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a collection from the data store.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.UpsertAsync(System.String,Microsoft.SemanticKernel.Memory.MemoryRecord,System.Threading.CancellationToken)">
            <summary>
            Upserts a memory record into the data store. Does not guarantee that the collection exists.
                If the record already exists, it will be updated.
                If the record does not exist, it will be created.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="record">The memory record to upsert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The unique identifier for the memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.UpsertBatchAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Memory.MemoryRecord},System.Threading.CancellationToken)">
            <summary>
            Upserts a group of memory records into the data store. Does not guarantee that the collection exists.
                If the record already exists, it will be updated.
                If the record does not exist, it will be created.
            </summary>
            <param name="collectionName">The name associated with a collection of vectors.</param>
            <param name="records">The memory records to upsert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The unique identifiers for the memory records.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a memory record from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="key">The unique id associated with the memory record to get.</param>
            <param name="withEmbedding">If true, the embedding will be returned in the memory record.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The memory record if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a batch of memory records from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embedding.</param>
            <param name="keys">The unique ids associated with the memory record to get.</param>
            <param name="withEmbeddings">If true, the embeddings will be returned in the memory records.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The memory records associated with the unique keys provided.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a memory record from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="key">The unique id associated with the memory record to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.RemoveBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes a batch of memory records from the data store. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="keys">The unique ids associated with the memory record to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetNearestMatchesAsync(System.String,System.ReadOnlyMemory{System.Single},System.Int32,System.Double,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the nearest matches to an embedding of type <see cref="T:System.Single"/>. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="embedding">The embedding to compare the collection's embeddings with.</param>
            <param name="limit">The maximum number of similarity results to return.</param>
            <param name="minRelevanceScore">The minimum cosine similarity threshold for returned results.</param>
            <param name="withEmbeddings">If true, the embeddings will be returned in the memory records.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of tuples where item1 is a <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> and item2 is its similarity score as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.IMemoryStore.GetNearestMatchAsync(System.String,System.ReadOnlyMemory{System.Single},System.Double,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the nearest match to an embedding of type <see cref="T:System.Single"/>. Does not guarantee that the collection exists.
            </summary>
            <param name="collectionName">The name associated with a collection of embeddings.</param>
            <param name="embedding">The embedding to compare the collection's embeddings with.</param>
            <param name="minRelevanceScore">The minimum relevance threshold for returned results.</param>
            <param name="withEmbedding">If true, the embedding will be returned in the memory record.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A tuple consisting of the <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> and the similarity score as a <see cref="T:System.Double"/>. Null if no nearest match found.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory">
            <summary>
            An interface for semantic memory that creates and recalls memories associated with text.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Save some information into the semantic memory, keeping a copy of the source information.
            </summary>
            <param name="collection">Collection where to save the information.</param>
            <param name="text">Information to save.</param>
            <param name="id">Unique identifier.</param>
            <param name="description">Optional description.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Unique identifier of the saved memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SaveReferenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Save some information into the semantic memory, keeping only a reference to the source information.
            </summary>
            <param name="collection">Collection where to save the information.</param>
            <param name="text">Information to save.</param>
            <param name="externalId">Unique identifier, e.g. URL or GUID to the original source.</param>
            <param name="externalSourceName">Name of the external service, e.g. "MSTeams", "GitHub", "WebSite", "Outlook IMAP", etc.</param>
            <param name="description">Optional description.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Unique identifier of the saved memory record.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.GetAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Fetch a memory by key.
            For local memories the key is the "id" used when saving the record.
            For external reference, the key is the "URI" used when saving the record.
            </summary>
            <param name="collection">Collection to search.</param>
            <param name="key">Unique memory record identifier.</param>
            <param name="withEmbedding">Whether to return the embedding of the memory found.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Memory record, or null when nothing is found</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove a memory by key.
            For local memories the key is the "id" used when saving the record.
            For external reference, the key is the "URI" used when saving the record.
            </summary>
            <param name="collection">Collection to search.</param>
            <param name="key">Unique memory record identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Find some information in memory
            </summary>
            <param name="collection">Collection to search</param>
            <param name="query">What to search for</param>
            <param name="limit">How many results to return</param>
            <param name="minRelevanceScore">Minimum relevance score, from 0 to 1, where 1 means exact match.</param>
            <param name="withEmbeddings">Whether to return the embeddings of the memories found.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Memories found</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.ISemanticTextMemory.GetCollectionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a group of all available collection names.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A group of collection names.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryQueryResult">
            <summary>
            Copy of metadata associated with a memory entry.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Metadata">
            <summary>
            Whether the source data used to calculate embeddings are stored in the local
            storage provider or is available through an external service, such as web site, MS Graph, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Relevance">
            <summary>
            Search relevance, from 0 to 1, where 1 means perfect match.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryQueryResult.Embedding">
            <summary>
            Nullable embedding associated with the metadata returned for by a query.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryQueryResult.#ctor(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.Double,System.Nullable{System.ReadOnlyMemory{System.Single}})">
            <summary>
            Create a new instance of MemoryQueryResult
            </summary>
            <param name="metadata">
              Whether the source data used to calculate embeddings are stored in the local
              storage provider or is available through an external service, such as web site, MS Graph, etc.
            </param>
            <param name="relevance">Search relevance, from 0 to 1, where 1 means perfect match.</param>
            <param name="embedding">Optional embedding associated with the metadata.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryRecord">
            <summary>
            IMPORTANT: this is a storage schema. Changing the fields will invalidate existing metadata stored in persistent vector DBs.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecord.Embedding">
            <summary>
            Source content embeddings.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecord.Metadata">
            <summary>
            Metadata associated with a Semantic Kernel memory.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.#ctor(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Constructor, use <see cref="M:Microsoft.SemanticKernel.Memory.MemoryRecord.ReferenceRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})"/> or <see cref="M:Microsoft.SemanticKernel.Memory.MemoryRecord.LocalRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.ReferenceRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Prepare an instance about a memory which source is stored externally.
            The universal resource identifies points to the URL (or equivalent) to find the original source.
            </summary>
            <param name="externalId">URL (or equivalent) to find the original source.</param>
            <param name="sourceName">Name of the external service, e.g. "MSTeams", "GitHub", "WebSite", "Outlook IMAP", etc.</param>
            <param name="description">Optional description of the record. Note: the description is not indexed.</param>
            <param name="embedding">Source content embedding.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.LocalRecord(System.String,System.String,System.String,System.ReadOnlyMemory{System.Single},System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Prepare an instance for a memory stored in the internal storage provider.
            </summary>
            <param name="id">Resource identifier within the storage provider, e.g. record ID/GUID/incremental counter etc.</param>
            <param name="text">Full text used to generate the embeddings.</param>
            <param name="description">Optional description of the record. Note: the description is not indexed.</param>
            <param name="embedding">Source content embedding.</param>
            <param name="additionalMetadata">Optional string for saving custom metadata.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.FromJsonMetadata(System.String,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Create a memory record from a serialized metadata string.
            </summary>
            <param name="json">Json string representing a memory record's metadata.</param>
            <param name="embedding">Optional embedding associated with a memory record.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.FromMetadata(Microsoft.SemanticKernel.Memory.MemoryRecordMetadata,System.ReadOnlyMemory{System.Single},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Create a memory record from a memory record's metadata.
            </summary>
            <param name="metadata">Metadata associated with a memory.</param>
            <param name="embedding">Optional embedding associated with a memory record.</param>
            <param name="key">Optional existing database key.</param>
            <param name="timestamp">optional timestamp.</param>
            <returns>Memory record</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecord.GetSerializedMetadata">
            <summary>
            Serialize the metadata of a memory record.
            </summary>
            <returns>The memory record's metadata serialized to a json string.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata">
            <summary>
            Class representing the metadata associated with a Semantic Kernel memory.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.IsReference">
            <summary>
            Whether the source data used to calculate embeddings are stored in the local
            storage provider or is available through and external service, such as web site, MS Graph, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.ExternalSourceName">
            <summary>
            A value used to understand which external service owns the data, to avoid storing the information
            inside the URI. E.g. this could be "MSTeams", "WebSite", "GitHub", etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Id">
            <summary>
            Unique identifier. The format of the value is domain specific, so it can be a URL, a GUID, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Description">
            <summary>
            Optional title describing the content. Note: the title is not indexed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Text">
            <summary>
            Source text, available only when the memory is not an external source.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.AdditionalMetadata">
            <summary>
            Field for saving custom metadata with a memory.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="isReference">True if source data is local, false if source data comes from an external service</param>
            <param name="id">Unique string used to identify the <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/>.</param>
            <param name="text">Local source data associated with a <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> embedding.</param>
            <param name="description"><see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecord"/> description.</param>
            <param name="externalSourceName">Name of the external source if isReference is true.</param>
            <param name="additionalMetadata">Field for saving custom metadata with a memory.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata.Clone">
            <summary>
            Creates a shallow copy of <see cref="T:Microsoft.SemanticKernel.Memory.MemoryRecordMetadata"/>.
            </summary>
            <returns>A shallow copy of this object</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.NullMemory">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory"/> that stores nothing.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.NullMemory.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SaveReferenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.GetAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.RemoveAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.NullMemory.GetCollectionsAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Orchestration.ContextVariables">
            <summary>
            Context Variables is a data structure that holds temporary data while a task is being performed.
            It is accessed and manipulated by functions in the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.#ctor(System.String)">
            <summary>
            Constructor for context variables.
            </summary>
            <param name="value">Optional value for the main variable of the context including trust information.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.Clone">
            <summary>
            Create a copy of the current instance with a copy of the internal data
            </summary>
            <returns>Copy of the current instance</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.ContextVariables.Input">
            <summary>Gets the main input string.</summary>
            <remarks>If the main input string was removed from the collection, an empty string will be returned.</remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.Update(System.String)">
            <summary>
            Updates the main input text with the new value after a function is complete.
            </summary>
            <param name="value">The new input value, for the next function in the pipeline, or as a result for the user
            if the pipeline reached the end.</param>
            <returns>The current instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.Update(Microsoft.SemanticKernel.Orchestration.ContextVariables,System.Boolean)">
            <summary>
            Updates all the local data with new data, merging the two datasets.
            Do not discard old data
            </summary>
            <param name="newData">New data to be merged</param>
            <param name="merge">Whether to merge and keep old data, or replace. False == discard old data.</param>
            <returns>The current instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.Set(System.String,System.String)">
            <summary>
            This method allows to store additional data in the context variables, e.g. variables needed by functions in the
            pipeline. These "variables" are visible also to semantic functions using the "{{varName}}" syntax, allowing
            to inject more information into prompt templates.
            </summary>
            <param name="name">Variable name</param>
            <param name="value">Value to store. If the value is NULL the variable is deleted.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the variable value associated with the specified name.
            </summary>
            <param name="name">The name of the variable to get.</param>
            <param name="value">
            When this method returns, contains the variable value associated with the specified name, if the variable is found;
            otherwise, null.
            </param>
            <returns>true if the <see cref="T:Microsoft.SemanticKernel.Orchestration.ContextVariables"/> contains a variable with the specified name; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.ContextVariables.Item(System.String)">
            <summary>
            Array of all variables in the context variables.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The value of the variable.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.SemanticKernel.Orchestration.ContextVariables"/> contains the specified variable.
            </summary>
            <param name="name">The name of the variable to locate.</param>
            <returns>true if the <see cref="T:Microsoft.SemanticKernel.Orchestration.ContextVariables"/> contains a variable with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.ToString">
            <summary>
            Print the processed input, aka the current data after any processing occurred.
            </summary>
            <returns>Processed input, aka result</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ContextVariables.GetEnumerator">
            <summary>
            Get an enumerator that iterates through the context variables.
            </summary>
            <returns>An enumerator that iterates through the context variables</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Orchestration.ContextVariables._variables">
            <summary>
            Important: names are case insensitive
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Orchestration.ModelResult">
            <summary>
            Represents a result from a model execution.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ModelResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Orchestration.ModelResult"/> class with the specified result object.
            </summary>
            <param name="result">The result object to be stored in the ModelResult instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ModelResult.GetRawResult">
            <summary>
            Gets the raw result object stored in the <see cref="T:Microsoft.SemanticKernel.Orchestration.ModelResult"/>instance.
            </summary>
            <returns>The raw result object.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ModelResult.GetResult``1">
            <summary>
            Gets the result object stored in the <see cref="T:Microsoft.SemanticKernel.Orchestration.ModelResult"/> instance, cast to the specified type.
            </summary>
            <typeparam name="T">The type to cast the result object to.</typeparam>
            <returns>The result object cast to the specified type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the result object cannot be cast to the specified type.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.ModelResult.GetJsonResult">
            <summary>
            Gets the result object stored in the ModelResult instance as a JSON element.
            </summary>
            <returns>The result object as a JSON element.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Orchestration.SKContext">
            <summary>
            Semantic Kernel context.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Orchestration.SKContext._culture">
            <summary>
            The culture currently associated with this context.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.Result">
            <summary>
            Print the processed input, aka the current data after any processing occurred.
            </summary>
            <returns>Processed input, aka result</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.ModelResults">
            <summary>
            When a prompt is processed, aka the current data after any model results processing occurred.
            (One prompt can have multiple results).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.Culture">
            <summary>
            The culture currently associated with this context.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.Variables">
            <summary>
            User variables
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.Skills">
            <summary>
            Read only skills collection
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Orchestration.SKContext.LoggerFactory">
            <summary>
            App logger
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.SKContext.#ctor(Microsoft.SemanticKernel.Orchestration.ContextVariables,Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor for the context.
            </summary>
            <param name="variables">Context variables to include in context.</param>
            <param name="skills">Skills to include in context.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.SKContext.ToString">
            <summary>
            Print the processed input, aka the current data after any processing occurred.
            </summary>
            <returns>Processed input, aka result.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Orchestration.SKContext.Clone">
            <summary>
            Create a clone of the current context, using the same kernel references (memory, skills, logger)
            and a new set variables, so that variables can be modified without affecting the original context.
            </summary>
            <returns>A new context copied from the current one</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler">
            <summary>
            A delegating handler that provides retry logic for HTTP requests.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.#ctor(Microsoft.SemanticKernel.Reliability.HttpRetryConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler"/> class.
            </summary>
            <param name="config">The retry configuration.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Executes the action with retry logic
            </summary>
            <remarks>
            The request is retried if it throws an exception that is a retryable exception.
            If the request throws an exception that is not a retryable exception, it is not retried.
            If the request returns a response with a retryable error code, it is retried.
            If the request returns a response with a non-retryable error code, it is not retried.
            If the exception contains a RetryAfter header, the request is retried after the specified delay.
            If configured to use exponential backoff, the delay is doubled for each retry.
            </remarks>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.IDelayProvider">
            <summary>
            Interface for a delay provider, primarily to enable unit testing.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.ITimeProvider">
            <summary>
            Interface for a time provider, primarily to enable unit testing.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.GetWaitTime(System.Int32,System.Net.Http.HttpResponseMessage)">
            <summary>
            Get the wait time for the next retry.
            </summary>
            <param name="retryCount">Current retry count</param>
            <param name="response">The response message that potentially contains RetryAfter header.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler.HasTimeForRetry(System.DateTimeOffset,System.Int32,System.Net.Http.HttpResponseMessage,System.TimeSpan@)">
            <summary>
            Determines if there is time left for a retry.
            </summary>
            <param name="start">The start time of the original request.</param>
            <param name="retryCount">The current retry count.</param>
            <param name="response">The response message that potentially contains RetryAfter header.</param>
            <param name="waitFor">The wait time for the next retry.</param>
            <returns>True if there is time left for a retry, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandlerFactory">
            <summary>
            Deprecated A factory class for creating instances of <see cref="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler"/>.
            Implements the <see cref="T:Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandlerFactory.#ctor(Microsoft.SemanticKernel.Reliability.HttpRetryConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandlerFactory"/> class.
            </summary>
            <param name="config">An optional <see cref="T:Microsoft.SemanticKernel.Reliability.HttpRetryConfig"/> instance to configure the retry behavior. If not provided, default configuration will be used.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandlerFactory.Create(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler"/> with the specified logger.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A new instance of <see cref="T:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandler"/>.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.DefaultHttpRetryHandlerFactory.Config">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Reliability.HttpRetryConfig"/> instance used to configure the retry behavior.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Reliability.HttpRetryConfig">
            <summary>
            Retry configuration for IHttpRetryPolicy that uses RetryAfter header when present.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.MaxRetryCount">
            <summary>
            Maximum number of retries.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is negative.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.MinRetryDelay">
            <summary>
            Minimum delay between retries.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.MaxRetryDelay">
            <summary>
            Maximum delay between retries.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.MaxTotalRetryTime">
            <summary>
            Maximum total time spent retrying.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.UseExponentialBackoff">
            <summary>
            Whether to use exponential backoff or not.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.RetryableStatusCodes">
            <summary>
            List of status codes that should be retried.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Reliability.HttpRetryConfig.RetryableExceptionTypes">
            <summary>
            List of exception types that should be retried.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.IPromptTemplate">
            <summary>
            Interface for prompt template.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SemanticFunctions.IPromptTemplate.GetParameters">
            <summary>
            Get the list of parameters required by the template, using configuration and template info.
            </summary>
            <returns>List of parameters</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SemanticFunctions.IPromptTemplate.RenderAsync(Microsoft.SemanticKernel.Orchestration.SKContext,System.Threading.CancellationToken)">
            <summary>
            Render the template using the information in the context
            </summary>
            <param name="executionContext">Kernel execution context helpers</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Prompt rendered to string</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig">
            <summary>
            Prompt template configuration.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig">
            <summary>
            Completion configuration parameters.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.Temperature">
            <summary>
            Sampling temperature to use, between 0 and 2. Higher values will make the output more random.
            Lower values will make it more focused and deterministic.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.TopP">
            <summary>
            Cut-off of top_p probability mass of tokens to consider.
            For example, 0.1 means only the tokens comprising the top 10% probability mass are considered.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.PresencePenalty">
            <summary>
            Lowers the probability of a word appearing if it already appeared in the predicted text.
            Unlike the frequency penalty, the presence penalty does not depend on the frequency at which words
            appear in past predictions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.FrequencyPenalty">
            <summary>
            Controls the model’s tendency to repeat predictions. The frequency penalty reduces the probability
            of words that have already been generated. The penalty depends on how many times a word has already
            occurred in the prediction.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.MaxTokens">
            <summary>
            Maximum number of tokens that can be generated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.StopSequences">
            <summary>
            Stop sequences are optional sequences that tells the AI model when to stop generating tokens.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.ChatSystemPrompt">
            <summary>
            When provided will be used to set the system prompt while using Chat Completions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.CompletionConfig.ServiceId">
            <summary>
            When provided will be used to select the AI service used.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputParameter">
            <summary>
            Input parameter for semantic functions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputParameter.Name">
            <summary>
            Name of the parameter to pass to the function.
            e.g. when using "{{$input}}" the name is "input", when using "{{$style}}" the name is "style", etc.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputParameter.Description">
            <summary>
            Parameter description for UI apps and planner. Localization is not supported here.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputParameter.DefaultValue">
            <summary>
            Default value when nothing is provided.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputConfig">
            <summary>
            Input configuration (list of all input parameters for a semantic function).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.InputConfig.Parameters">
            <summary>
            Gets or sets the list of input parameters.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Schema">
            <summary>
            Schema - Not currently used.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Type">
            <summary>
            Type, such as "completion", "embeddings", etc.
            </summary>
            <remarks>TODO: use enum</remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Completion">
            <summary>
            Completion configuration parameters.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.DefaultServices">
            <summary>
            Default AI services to use.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Input">
            <summary>
            Input configuration (that is, list of all input parameters).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.Compact">
            <summary>
            Removes some default properties to reduce the JSON complexity.
            </summary>
            <returns>Compacted prompt template configuration.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig.FromJson(System.String)">
            <summary>
            Creates a prompt template configuration from JSON.
            </summary>
            <param name="json">JSON of the prompt template configuration.</param>
            <returns>Prompt template configuration.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the deserialization returns null.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig">
            <summary>
            Semantic function configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig.PromptTemplateConfig">
            <summary>
            Prompt template configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig.PromptTemplate">
            <summary>
            Prompt template.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SemanticFunctions.SemanticFunctionConfig.#ctor(Microsoft.SemanticKernel.SemanticFunctions.PromptTemplateConfig,Microsoft.SemanticKernel.SemanticFunctions.IPromptTemplate)">
            <summary>
            Constructor for SemanticFunctionConfig.
            </summary>
            <param name="config">Prompt template configuration.</param>
            <param name="template">Prompt template.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.IAIService">
            <summary>
            Represents an empty interface for AI services.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.IAIServiceProvider">
            <summary>
            Represents an interface for AI service providers that implements the INamedServiceProvider interface.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.INamedServiceProvider`1">
            <summary>
            Represents a named service provider that can retrieve services by type and name.
            </summary>
            <typeparam name="TService">The base type of the services provided by this provider.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.INamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            Gets the service of the specified type and name, or null if not found.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="name">The name of the service, or null for the default service.</param>
            <returns>The service instance, or null if not found.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Services.IServiceConfig">
            <summary>
            Service configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Services.IServiceConfig.ServiceId">
            <summary>
            An identifier used to map semantic functions to AI connectors,
            decoupling prompts configurations from the actual model and AI provider used.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceProviderExtensions.TryGetService``1(Microsoft.SemanticKernel.Services.IAIServiceProvider,``0@)">
            <summary>
            Tries to get the service of the specified type and name, and returns a value indicating whether the operation succeeded.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="service">The output parameter to receive the service instance, or null if not found.</param>
            <returns>True if the service was found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Services.AIServiceProviderExtensions.TryGetService``1(Microsoft.SemanticKernel.Services.IAIServiceProvider,System.String,``0@)">
            <summary>
            Tries to get the service of the specified type and name, and returns a value indicating whether the operation succeeded.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="serviceProvider">The service provider.</param>
            <param name="name">The name of the service, or null for the default service.</param>
            <param name="service">The output parameter to receive the service instance, or null if not found.</param>
            <returns>True if the service was found, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.FunctionsView">
            <summary>
            Class used to copy and export data from the skill collection.
            The data is mutable, but changes do not affect the skill collection.
            The class can be used to create custom lists in case your scenario needs to.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionsView.SemanticFunctions">
            <summary>
            Collection of semantic skill names and function names, including function parameters.
            Functions are grouped by skill name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionsView.NativeFunctions">
            <summary>
            Collection of native skill names and function views, including function parameters.
            Functions are grouped by skill name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.FunctionsView.AddFunction(Microsoft.SemanticKernel.SkillDefinition.FunctionView)">
            <summary>
            Add a function to the list
            </summary>
            <param name="view">Function details</param>
            <returns>Current instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.FunctionsView.IsSemantic(System.String,System.String)">
            <summary>
            Returns true if the function specified is unique and semantic
            </summary>
            <param name="skillName">Skill name</param>
            <param name="functionName">Function name</param>
            <returns>True if unique and semantic</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.FunctionsView.IsNative(System.String,System.String)">
            <summary>
            Returns true if the function specified is unique and native
            </summary>
            <param name="skillName">Skill name</param>
            <param name="functionName">Function name</param>
            <returns>True if unique and native</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.FunctionView">
            <summary>
            Class used to copy and export data from the skill collection.
            The data is mutable, but changes do not affect the skill collection.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.Name">
            <summary>
            Name of the function. The name is used by the skill collection and in prompt templates e.g. {{skillName.functionName}}
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.SkillName">
            <summary>
            Name of the skill containing the function. The name is used by the skill collection and in prompt templates e.g. {{skillName.functionName}}
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.Description">
            <summary>
            Function description. The description is used in combination with embeddings when searching relevant functions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.IsSemantic">
            <summary>
            Whether the delegate points to a semantic function
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.IsAsynchronous">
            <summary>
            Whether the delegate is an asynchronous function
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.FunctionView.Parameters">
            <summary>
            List of function parameters
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.FunctionView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.FunctionView.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.SemanticKernel.SkillDefinition.ParameterView},System.Boolean,System.Boolean)">
            <summary>
            Create a function view.
            </summary>
            <param name="name">Function name</param>
            <param name="skillName">Skill name, e.g. the function namespace</param>
            <param name="description">Function description</param>
            <param name="parameters">List of function parameters provided by the skill developer</param>
            <param name="isSemantic">Whether the function is a semantic one (or native is False)</param>
            <param name="isAsynchronous">Whether the function is async. Note: all semantic functions are async.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection">
            <summary>
            Read-only skill collection interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection.GetFunction(System.String)">
            <summary>
            Gets the function stored in the collection.
            </summary>
            <param name="functionName">The name of the function to retrieve.</param>
            <returns>The function retrieved from the collection.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">The specified function could not be found in the collection.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection.GetFunction(System.String,System.String)">
            <summary>
            Gets the function stored in the collection.
            </summary>
            <param name="skillName">The name of the skill with which the function is associated.</param>
            <param name="functionName">The name of the function to retrieve.</param>
            <returns>The function retrieved from the collection.</returns>
            <exception cref="T:Microsoft.SemanticKernel.Diagnostics.SKException">The specified function could not be found in the collection.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection.TryGetFunction(System.String,Microsoft.SemanticKernel.SkillDefinition.ISKFunction@)">
            <summary>
            Check if a function is available in the current context, and return it.
            </summary>
            <param name="functionName">The name of the function to retrieve.</param>
            <param name="availableFunction">When this method returns, the function that was retrieved if one with the specified name was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the function was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection.TryGetFunction(System.String,System.String,Microsoft.SemanticKernel.SkillDefinition.ISKFunction@)">
            <summary>
            Check if a function is available in the current context, and return it.
            </summary>
            <param name="skillName">The name of the skill with which the function is associated.</param>
            <param name="functionName">The name of the function to retrieve.</param>
            <param name="availableFunction">When this method returns, the function that was retrieved if one with the specified name was found; otherwise, <see langword="null"/>.</param>
            <returns><see langword="true"/> if the function was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection.GetFunctionsView(System.Boolean,System.Boolean)">
            <summary>
            Get all registered functions details, minus the delegates
            </summary>
            <param name="includeSemantic">Whether to include semantic functions in the list</param>
            <param name="includeNative">Whether to include native functions in the list</param>
            <returns>An object containing all the functions details</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.ISKFunction">
            <summary>
            Semantic Kernel callable function interface
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.Name">
            <summary>
            Name of the function. The name is used by the skill collection and in prompt templates e.g. {{skillName.functionName}}
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.SkillName">
            <summary>
            Name of the skill containing the function. The name is used by the skill collection and in prompt templates e.g. {{skillName.functionName}}
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.Description">
            <summary>
            Function description. The description is used in combination with embeddings when searching relevant functions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.IsSemantic">
            <summary>
            Whether the function is defined using a prompt template.
            IMPORTANT: native functions might use semantic functions internally,
            so when this property is False, executing the function might still involve AI calls.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.RequestSettings">
            <summary>
            AI service settings
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.Describe">
            <summary>
            Returns a description of the function, including parameters.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.SemanticKernel.SkillDefinition.FunctionView"/> describing the function</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.InvokeAsync(Microsoft.SemanticKernel.Orchestration.SKContext,Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings,System.Threading.CancellationToken)">
            <summary>
            Invoke the <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ISKFunction"/>.
            </summary>
            <param name="context">SK context</param>
            <param name="settings">LLM completion settings (for semantic functions only)</param>
            <returns>The updated context, potentially a new one if context switching is implemented.</returns>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.SetDefaultSkillCollection(Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollection)">
            <summary>
            Set the default skill collection to use when the function is invoked
            without a context or with a context that doesn't have a collection.
            </summary>
            <param name="skills">Kernel's skill collection</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.SetAIService(System.Func{Microsoft.SemanticKernel.AI.TextCompletion.ITextCompletion})">
            <summary>
            Set the AI service used by the semantic function, passing a factory method.
            The factory allows to lazily instantiate the client and to properly handle its disposal.
            </summary>
            <param name="serviceFactory">AI service factory</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISKFunction.SetAIConfiguration(Microsoft.SemanticKernel.AI.TextCompletion.CompleteRequestSettings)">
            <summary>
            Set the AI completion settings used with LLM requests
            </summary>
            <param name="settings">LLM completion settings</param>
            <returns>Self instance</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.ISkillCollection">
            <summary>
            Skill collection interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ISkillCollection.AddFunction(Microsoft.SemanticKernel.SkillDefinition.ISKFunction)">
            <summary>
            Add a function to the collection
            </summary>
            <param name="functionInstance">Function delegate</param>
            <returns>Self instance</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.NullReadOnlySkillCollection.GetFunction(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.NullReadOnlySkillCollection.GetFunction(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.NullReadOnlySkillCollection.TryGetFunction(System.String,Microsoft.SemanticKernel.SkillDefinition.ISKFunction@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.NullReadOnlySkillCollection.TryGetFunction(System.String,System.String,Microsoft.SemanticKernel.SkillDefinition.ISKFunction@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.NullReadOnlySkillCollection.GetFunctionsView(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.ParameterView">
            <summary>
            Class used to copy and export data about parameters
            for planner and related scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ParameterView.Name">
            <summary>
            Parameter name. Alphanumeric chars + "_" only.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ParameterView.Description">
            <summary>
            Parameter description.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ParameterView.DefaultValue">
            <summary>
            Default value when the value is not provided.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ParameterView.Type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterView.#ctor(System.String,System.String,System.String,Microsoft.SemanticKernel.SkillDefinition.ParameterViewType)">
            <summary>
            Create a function parameter view, using information provided by the skill developer.
            </summary>
            <param name="name">Parameter name. The name must be alphanumeric (underscore is the only special char allowed).</param>
            <param name="description">Parameter description</param>
            <param name="defaultValue">Default parameter value, if not provided</param>
            <param name="type">Parameter type.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType">
            <summary>
            Represents the type for the parameter view.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.name">
            <summary>
            The name of the parameter view type
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.String">
            <summary>
            Represents the "string" parameter view type.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Number">
            <summary>
            Represents the "number" parameter view type.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Object">
            <summary>
            Represents the "object" parameter view type.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Array">
            <summary>
            Represents the "array" parameter view type.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Boolean">
            <summary>
            Represents the "boolean" parameter view type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType"/> class.
            </summary>
            <param name="name">The name of the parameter view type.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Name">
            <summary>
            Gets the name of the parameter view type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.ToString">
            <summary>
            Returns a string representation of the parameter view type.
            </summary>
            <returns>A string representing the parameter view type.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Equals(Microsoft.SemanticKernel.SkillDefinition.ParameterViewType)">
            <summary>
            Determines whether this instance of <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType"/> is equal to another instance.
            </summary>
            <param name="other">The <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType"/> to compare with this instance.</param>
            <returns><c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.Equals(System.Object)">
            <summary>
            Determines whether this instance of <see cref="T:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType"/> is equal to another object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.ParameterViewType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.SKFunctionAttribute">
            <summary>
            Specifies that a method is a native function available to Semantic Kernel.
            </summary>
            <remarks>
            <para>
            When the kernel imports a skill, it searches all public methods tagged with this attribute.
            If a method is not tagged with this attribute, it may still be imported directly via a <see cref="T:System.Delegate"/>
            or <see cref="T:System.Reflection.MethodInfo"/> referencing the method directly.
            </para>
            <para>
            A description of the method should be supplied using the <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            That description will be used both with LLM prompts and embedding comparisons; the quality of
            the description affects the planner's ability to reason about complex tasks. A <see cref="T:System.ComponentModel.DescriptionAttribute"/>
            should also be provided on each parameter to provide a description of the parameter suitable for consumption
            by an LLM or embedding.
            </para>
            <para>
            Functions may have any number of parameters. Parameters of type <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and
            <see cref="T:System.Threading.CancellationToken"/> are filled in from the corresponding members of the <see cref="T:Microsoft.SemanticKernel.Orchestration.SKContext"/>;
            <see cref="T:Microsoft.SemanticKernel.Orchestration.SKContext"/> itself may also be a parameter. A given native function may declare at
            most one parameter of each of these types.  All other parameters must be of a primitive .NET type or
            a type attributed with <see cref="T:System.ComponentModel.TypeConverterAttribute"/>. Functions may return a <see cref="T:System.Threading.Tasks.Task"/>,
            <see cref="T:System.Threading.Tasks.ValueTask"/>, any primitive .NET type or a type attributed with <see cref="T:System.ComponentModel.TypeConverterAttribute"/>,
            or a <see cref="T:System.Threading.Tasks.Task`1"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/> of such a type.
            </para>
            <para>
            Parameters are populated based on a context variable of the same name, unless an <see cref="T:Microsoft.SemanticKernel.SkillDefinition.SKNameAttribute"/> is
            used to override which context variable is targeted. If no context variable of the given name is present, but
            a default value was specified via either a <see cref="T:System.ComponentModel.DefaultValueAttribute"/> or an optional value in the siguatre,
            that default value is used instead. If no default value was specified and it's the first parameter, the "input"
            context variable will be used.  If no value is available, the invocation will fail.
            </para>
            <para>
            For non-string parameters, the context variable value is automatically converted to the appropriate type to be passed
            in based on the <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type. Similarly, return values are automatically converted
            back to strings via the associated <see cref="T:System.ComponentModel.TypeConverter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.SKFunctionAttribute.#ctor">
            <summary>Initializes the attribute.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.SKNameAttribute">
            <summary>Overrides the default name used by a Semantic Kernel native function name or parameter.</summary>
            <remarks>
            By default, the method or parameter's name is used. If the method returns a task and ends with
            "Async", by default the suffix is removed. This attribute can be used to override such heuristics.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.SKNameAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the name to use.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.SKNameAttribute.Name">
            <summary>Gets the specified name.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute">
            <summary>
            Attribute to describe additional parameters used by a native function that aren't part of its method signature.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute"/> class with the specified name and description.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="description">The description of the parameter.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute.Description">
            <summary>
            Gets the description of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SkillDefinition.SKParameterAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the parameter to use if no context variable is supplied matching the parameter name.
            </summary>
            <remarks>
            There are two ways to supply a default value to a parameter. A default value can be supplied for the parameter in
            the method signature itself, or a default value can be specified using this property. If both are specified, the
            value in the attribute is used.  The attribute is most useful when the target parameter is followed by a non-optional
            parameter (such that this parameter isn't permitted to be optional) or when the attribute is applied to a method
            to indicate a context parameter that is not specified as a method parameter but that's still used by the method body.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.IPromptTemplateEngine">
            <summary>
            Prompt template engine interface.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.IPromptTemplateEngine.RenderAsync(System.String,Microsoft.SemanticKernel.Orchestration.SKContext,System.Threading.CancellationToken)">
            <summary>
            Given a prompt template, replace the variables with their values and execute the functions replacing their
            reference with the function result.
            </summary>
            <param name="templateText">Prompt template (see skprompt.txt files)</param>
            <param name="context">Access into the current kernel execution context</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The prompt template ready to be used for an AI request</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.ReadOnlyMemoryConverter">
            <summary>Provides a converter for <see cref="T:System.ReadOnlyMemory`1"/>.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Text.ReadOnlyMemoryConverter.s_arrayConverter">
            <summary>An instance of a converter for float[] that all operations delegate to.</summary>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.EnvExtensions.GetBoolEnvVar(System.String)">
            <summary>
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Values: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
        <member name="M:HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="completionOption">Indicates if HttpClient operations should be considered completed either as soon as a response is available,
            or after reading the entire response message including the content.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="M:HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.Diagnostics.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="T:HttpClientProvider">
            <summary>
            Provides functionality for retrieving instances of HttpClient.
            </summary>
        </member>
        <member name="M:HttpClientProvider.GetHttpClient(Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <param name="httpHandlerFactory">The <see cref="T:Microsoft.SemanticKernel.Http.IDelegatingHandlerFactory"/> to be used when the HttpClient is not provided already</param>
            <param name="httpClient">An optional pre-existing instance of HttpClient.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="T:HttpContentExtensions">
            <summary>
            Provides extension methods for working with HTTP content in a way that translates HttpRequestExceptions into HttpOperationExceptions.
            </summary>
        </member>
        <member name="M:HttpContentExtensions.ReadAsStringWithExceptionMappingAsync(System.Net.Http.HttpContent)">
            <summary>
            Reads the content of the HTTP response as a string and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <returns>A string representation of the HTTP content.</returns>
        </member>
        <member name="M:HttpContentExtensions.ReadAsStreamAndTranslateExceptionAsync(System.Net.Http.HttpContent)">
            <summary>
            Reads the content of the HTTP response as a stream and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <returns>A stream representing the HTTP content.</returns>
        </member>
        <member name="M:HttpContentExtensions.ReadAsByteArrayAndTranslateExceptionAsync(System.Net.Http.HttpContent)">
            <summary>
            Reads the content of the HTTP response as a byte array and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <returns>A byte array representing the HTTP content.</returns>
        </member>
        <member name="T:NonDisposableHttpClientHandler">
            <summary>
            Represents a singleton implementation of <see cref="T:System.Net.Http.HttpClientHandler"/> that is not disposable.
            </summary>
        </member>
        <member name="M:NonDisposableHttpClientHandler.#ctor">
            <summary>
            Private constructor to prevent direct instantiation of the class.
            </summary>
        </member>
        <member name="P:NonDisposableHttpClientHandler.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:NonDisposableHttpClientHandler"/>.
            </summary>
        </member>
        <member name="M:NonDisposableHttpClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying resources held by the <see cref="T:NonDisposableHttpClientHandler"/>.
            This implementation does nothing to prevent unintended disposal, as it may affect all references.
            </summary>
            <param name="disposing">True if called from <see cref="M:NonDisposableHttpClientHandler.Dispose(System.Boolean)"/>, false if called from a finalizer.</param>
        </member>
    </members>
</doc>
